/*
 * SPI.c
 *
 *  Created on: 25 maj 2017
 *      Author: Przemek
 */

//TODO: spi_ClockTick();

#include "SPI.h"

void spi_SelectSlave(alt_u32 base, alt_u32 slave){
	IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
	// Set the SSO bit (force chipselect)
	IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
}

void spi_DeselectSlave(alt_u32 base, alt_u32 slave){
	alt_u32 control_reg;

	IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
	// reset the SSO bit (force chipselect)
	control_reg = IORD_ALTERA_AVALON_SPI_CONTROL(base);
	control_reg &= !ALTERA_AVALON_SPI_CONTROL_SSO_MSK;
	IOWR_ALTERA_AVALON_SPI_CONTROL(base, control_reg);
}

void spi_SendByte(alt_u32 base, alt_u32 slave, alt_u8 data){
	alt_u32 status;

	spi_SelectSlave(base,slave);

	do {
	status = IORD_ALTERA_AVALON_SPI_STATUS(base);
	} while ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0);
	IOWR_ALTERA_AVALON_SPI_TXDATA(base,data);

	/* Wait until the interface has finished transmitting */
	do
	{
		status = IORD_ALTERA_AVALON_SPI_STATUS(base);
	}
	while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);

	spi_DeselectSlave(base,slave);
}

void spi_SendData(alt_u32 base, alt_u32 slave, const alt_u8 *data, alt_u8 length){		//FIXME: Funkcja po ka¿dm wys³anym bajcie "odznacza" slave'a
	alt_u8 i;

//	alt_u32 reg = IORD_ALTERA_AVALON_SPI_CONTROL(base);
//	alt_printf("Control register value: %x\n", reg);
//	reg = IORD_ALTERA_AVALON_SPI_SLAVE_SEL(base);
//	alt_printf("Slave Select register value: %x\n", reg);
//	spi_SelectSlave(base,slave);

	for(i=0;i<length;i++){
		spi_SelectSlave(base,slave);

		/*Transmit a byte*/
		while(!(IORD_ALTERA_AVALON_SPI_STATUS(base) & ALTERA_AVALON_SPI_STATUS_TRDY_MSK));
		IOWR_ALTERA_AVALON_SPI_TXDATA(base,*data++);

//		/*Read and throw away received data*/
//		while(!(IORD_ALTERA_AVALON_SPI_STATUS(base) & ALTERA_AVALON_SPI_STATUS_RRDY_MSK));
//		IORD_ALTERA_AVALON_SPI_RXDATA(base);

		/* Wait until the interface has finished transmitting */
		while(!(IORD_ALTERA_AVALON_SPI_STATUS(base) & ALTERA_AVALON_SPI_STATUS_TMT_MSK));

		spi_DeselectSlave(base,slave);
	}
//	/* Wait until the interface has finished transmitting */
//	while(!(IORD_ALTERA_AVALON_SPI_STATUS(base) & ALTERA_AVALON_SPI_STATUS_TMT_MSK));
//
//	spi_DeselectSlave(base,slave);
}

bool spi_IsData(alt_u32 base){
	if(IORD_ALTERA_AVALON_SPI_STATUS(base) & ALTERA_AVALON_SPI_STATUS_RRDY_MSK){
		return true;
	}

	return false;
}

alt_u32 spi_ReadData(alt_u32 base){
	if(spi_IsData(base)){
		alt_u32 data = IORD_ALTERA_AVALON_SPI_RXDATA(base);

		return data;
	}

	return 1;
}
