/*
 * SDcard.c
 *
 *  Created on: 25 maj 2017
 *      Author: Przemek
 */


#include "SDcard.h"
#include "SPI.h"
#include "system.h"
#include "sys/alt_stdio.h"
#include "altera_avalon_spi.h"


alt_u8 sdCard_Init(void){
	alt_u8 i,j;
	alt_u32 *response;

	alt_u8 cmd0[6] = {64,0,0,0,0,149};			//start condition = 01 + cmd_nr = 0; argument = 0,0,0,0; crc = 1001010 + stop condition = 1
	alt_u8 cmd8[6] = {72,0,0,1,170,135};
	alt_u8 cmd55[6] = {119,0,0,0,0,102};
	alt_u8 cmd58[6] = {122,0,0,0,0,117};
	alt_u8 acmd41[6] = {105,64,0,0,0,1};

	alt_u8 cmd0_response = 1;
	alt_u8 cmd8_response[5] = {1,0,0,1,170};
	alt_u8 cmd55_response = 1;
	alt_u8 acmd41_response = 0;

	/*Discard previous data*/
	if(spi_IsData(SPI_0_BASE)){
		spi_ReadData(SPI_0_BASE);
	}

	/*1) Apply more than 74 cycles of Dummy-clock to the SD card.*/
	for(i=0;i<10;i++){
		spi_SendByte(SPI_0_BASE, 0, 255);
		/*Discard response*/
		if(spi_IsData(SPI_0_BASE)){
			spi_ReadData(SPI_0_BASE);
		}
	}

	/*2) Select operation mode (SD mode or SPI mode)
	 In case of SPI mode operation, host should drive 1 pin (CD/DAT3) of SD Card I/F to ìLowî level. Then, issue CMD0.
	 In case of SD mode operation, host should drive or detect 1 pin of SD Card I/F (Pull up register of 1 pin is pull
	up to ìHighî normally).
	 Card maintain selected operation mode except re-issue of CMD0 or power on below is SD mode initialization procedure.*/

//	/*Send CMD0*/
//	for(i=0;i<6;i++){
//		spi_SendByte(SPI_0_BASE, 0, cmd0[i]);
//		/*Discard response*/
//		if(spi_IsData(SPI_0_BASE)){
//			spi_ReadData(SPI_0_BASE);
//		}
//	}
//	//The SD card will respond to the reset command by sending a basic 8-bit response on the MISO line
//	//If the command you sent was successfully	received, then you will receive the message (00000001)
//	//To receive this message, your program should continuously toggle the SD CLK signal and observe the
//	//MISO line for data, while keeping the MOSI line high and the CS line low
//	//Note that the response to each command is sent by the card a few SD CLK cycles later. If the
//	//expected response is not received within 16 clock cycles after sending the reset command, the reset
//	//command has to be sent again.
//
//	for(i=0;i<2;i++){
//		spi_SendByte(SPI_0_BASE, 0, 255);
//		/*Read response*/
//		if(spi_IsData(SPI_0_BASE)){
//			alt_u32 response;
//
//			response = spi_ReadData(SPI_0_BASE);
//			alt_printf("Response from microSD card: %x\n", response);
//		}
//	}
	/*Send CMD0*/
	*response = sdCard_SendCommand(cmd0,1);
	/*Check response*/
	if(response[0] != cmd0_response){
		//Error
		return 0;
	}

//	/*Send CMD8*/
//	for(i=0;i<6;i++){
//		spi_SendByte(SPI_0_BASE, 0, cmd8[i]);
//		/*Discard response*/
//		if(spi_IsData(SPI_0_BASE)){
//			spi_ReadData(SPI_0_BASE);
//		}
//	}
//
//	for(i=0;i<6;i++){
//		spi_SendByte(SPI_0_BASE, 0, 255);
//		/*Read response*/
//		if(spi_IsData(SPI_0_BASE)){
//			alt_u32 response;
//
//			response = spi_ReadData(SPI_0_BASE);
//			alt_printf("Response from microSD card: %x\n", response);
//		}
//	}
	/*Send CMD8*/
	response = sdCard_SendCommand(cmd8,5);
	/*Check response*/
	for(i=0;i<5;i++){
		if(response[i] != cmd8_response[i]){
			//Error
			return 0;
		}
	}

//	for(j=0;j<2;j++){
//		/*First send CMD55*/
//		for(i=0;i<6;i++){
//			spi_SendByte(SPI_0_BASE, 0, cmd55[i]);
//			/*Discard response*/
//			if(spi_IsData(SPI_0_BASE)){
//				spi_ReadData(SPI_0_BASE);
//			}
//		}
//
//		for(i=0;i<2;i++){
//			spi_SendByte(SPI_0_BASE, 0, 255);
//			/*Read response*/
//			if(spi_IsData(SPI_0_BASE)){
//				alt_u32 response;
//
//				response = spi_ReadData(SPI_0_BASE);
//				alt_printf("Response from microSD card: %x\n", response);
//			}
//		}
//
//		/*Send ACMD41*/
//		for(i=0;i<6;i++){
//			spi_SendByte(SPI_0_BASE, 0, acmd41[i]);
//			/*Discard response*/
//			if(spi_IsData(SPI_0_BASE)){
//				spi_ReadData(SPI_0_BASE);
//			}
//		}
//
//		for(i=0;i<2;i++){
//			spi_SendByte(SPI_0_BASE, 0, 255);
//			/*Read response*/
//			if(spi_IsData(SPI_0_BASE)){
//				alt_u32 response;
//
//				response = spi_ReadData(SPI_0_BASE);
//				alt_printf("Response from microSD card: %x\n", response);
//			}
//		}
//	}

	do{												//Repeat until valid response
		/*Send CMD55*/
		response = sdCard_SendCommand(cmd55,1);
		/*Check response*/
		if(response[0] != cmd55_response){
			//Error
			return 0;
		}
		/*Send ACMD41*/
		response[0] = sdCard_SendCommand(acmd41,1);
	} while(response[0] == 1);

	/*Check response*/
	if(response[0] != acmd41_response){
		//Error
		return 0;
	}

//	/*Send CMD58*/
//	for(i=0;i<6;i++){
//		spi_SendByte(SPI_0_BASE, 0, cmd58[i]);
//		/*Discard response*/
//		if(spi_IsData(SPI_0_BASE)){
//			spi_ReadData(SPI_0_BASE);
//		}
//	}
//
//	for(i=0;i<6;i++){
//		spi_SendByte(SPI_0_BASE, 0, 255);
//		/*Read response*/
//		if(spi_IsData(SPI_0_BASE)){
//			alt_u32 response;
//
//			response = spi_ReadData(SPI_0_BASE);
//			alt_printf("Response from microSD card: %x\n", response);
//		}
//	}

	/*Send CMD58*/
	response = sdCard_SendCommand(cmd58,5);

	return 1;
}

void delay(void){
	alt_u32 i;

	for(i=0;i<100000;i++){
		//do nothing
	}
}

alt_32 sdCard_SendCommand(alt_u8 *command, alt_u8 response_length){
	alt_u8 i;
	alt_u32 response[response_length];

	/*Send command*/
	for(i=0;i<6;i++){
		spi_SendByte(SPI_0_BASE, 0, command[i]);
		/*Discard response*/
		if(spi_IsData(SPI_0_BASE)){
			spi_ReadData(SPI_0_BASE);
		}
	}
	/*Read response*/
	for(i=0;i<(response_length+1);i++){
		spi_SendByte(SPI_0_BASE, 0, 255);
		/*Read response*/
		if(spi_IsData(SPI_0_BASE)){
			alt_u32 temp;

			temp = spi_ReadData(SPI_0_BASE);
			if(i>0){							//Pierwsza otrzymana odpowiedü jest niewaøna
				response[i] = temp;
			}
			alt_printf("Response from microSD card: %x\n", temp);
		}
	}

	return response;
}
