/*
 * SDcard.c
 *
 *  Created on: 25 maj 2017
 *      Author: Przemek
 */

/*TODO:
 * -sdCardInit
 * -sendCommand
 * -delay
 * */

#include "SDcard.h"
#include "SPI.h"
#include "system.h"

void sdCardInit(void){
	/*1) Supply Voltage for initialization.
	Host System can apply the Operating Voltage from initialization to the card.
	 Apply more than 74 cycles of Dummy-clock to the SD card.*/
	delay();
	/*2) Select operation mode (SD mode or SPI mode)
	 In case of SPI mode operation, host should drive 1 pin (CD/DAT3) of SD Card I/F to “Low” level. Then, issue CMD0.
	 In case of SD mode operation, host should drive or detect 1 pin of SD Card I/F (Pull up register of 1 pin is pull
	up to “High” normally).
	 Card maintain selected operation mode except re-issue of CMD0 or power on below is SD mode initialization procedure.*/
	spi_SelectSlave(SPI_0_BASE, 0);
	//sendCommand(CMD0);
	//The SD card will respond to the reset command by sending a basic 8-bit response on the MISO line
	//If the command you sent was successfully	received, then you will receive the message (00000001)
	//To receive this message, your program should continuously toggle the SD CLK signal and observe the
	//MISO line for data, while keeping the MOSI line high !!!!and the CS line low!!!!
	//Note that the response to each command is sent by the card a few SD CLK cycles later. If the
	//expected response is not received within 16 clock cycles after sending the reset command, the reset
	//command has to be sent again.

	/*3) Send the ACMD41 with Arg = 0 and identify the operating voltage range of the Card.
	4) Apply the indicated operating voltage to the card.
	Reissue ACMD41 with apply voltage storing and repeat ACMD41 until the busy bit is cleared.
	 (Bit 31 Busy = 1) If response time out occurred, host can recognize not SD Card.
	 Note: In MMC-SPI Mode, CMD1 can use in this state.
	However, do not use CMD1 in case of SD Mode.
	5) Issue the CMD2 and get the Card ID (CID).
	Issue the CMD3 and get the RCA. (RCA value is randomly changed by access, not equal zero)
	6) Issue the CMD7 and move to the transfer state.
	If necessary, Host may issue the ACMD42 and disabled the pull up resistor for Card detect.
	7) Issue the ACMD13 and poll the Card status as SD Memory Card. Check SD_CARD_TYPE value. If significant 8 bits
	are “all zero”, that means SD Card. If it is not, stop initialization.
	8) Issue CMD7 and move to standby state.
	Issue CMD9 and get CSD.
	Issue CMD10 and get CID.
	9) Back to the Transfer state with CMD7.
	 Issue ACMD6 and choose the appropriate bus-width. */
}

void delay(void){
	alt_u8 i;

	for(i=0;i<100;i++){
		//do nothing
	}
}
