/* 
 * "Small Hello World" example. 
 * 
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example 
 * designs. It requires a STDOUT  device in your system's hardware. 
 *
 * The purpose of this example is to demonstrate the smallest possible Hello 
 * World application, using the Nios II HAL library.  The memory footprint
 * of this hosted application is ~332 bytes by default using the standard 
 * reference design.  For a more fully featured Hello World application
 * example, see the example titled "Hello World".
 *
 * The memory footprint of this example has been reduced by making the
 * following changes to the normal "Hello World" example.
 * Check in the Nios II Software Developers Manual for a more complete 
 * description.
 * 
 * In the SW Application project (small_hello_world):
 *
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 * In System Library project (small_hello_world_syslib):
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 *    - Define the preprocessor option ALT_NO_INSTRUCTION_EMULATION 
 *      This removes software exception handling, which means that you cannot 
 *      run code compiled for Nios II cpu with a hardware multiplier on a core 
 *      without a the multiply unit. Check the Nios II Software Developers 
 *      Manual for more details.
 *
 *  - In the System Library page:
 *    - Set Periodic system timer and Timestamp timer to none
 *      This prevents the automatic inclusion of the timer driver.
 *
 *    - Set Max file descriptors to 4
 *      This reduces the size of the file handle pool.
 *
 *    - Check Main function does not exit
 *    - Uncheck Clean exit (flush buffers)
 *      This removes the unneeded call to exit when main returns, since it
 *      won't.
 *
 *    - Check Don't use C++
 *      This builds without the C++ support code.
 *
 *    - Check Small C library
 *      This uses a reduced functionality C library, which lacks  
 *      support for buffering, file IO, floating point and getch(), etc. 
 *      Check the Nios II Software Developers Manual for a complete list.
 *
 *    - Check Reduced device drivers
 *      This uses reduced functionality drivers if they're available. For the
 *      standard design this means you get polled UART and JTAG UART drivers,
 *      no support for the LCD driver and you lose the ability to program 
 *      CFI compliant flash devices.
 *
 *    - Check Access device drivers directly
 *      This bypasses the device file system to access device drivers directly.
 *      This eliminates the space required for the device file system services.
 *      It also provides a HAL version of libc services that access the drivers
 *      directly, further reducing space. Only a limited number of libc
 *      functions are available in this configuration.
 *
 *    - Use ALT versions of stdio routines:
 *
 *           Function                  Description
 *        ===============  =====================================
 *        alt_printf       Only supports %s, %x, and %c ( < 1 Kbyte)
 *        alt_putstr       Smaller overhead than puts with direct drivers
 *                         Note this function doesn't add a newline.
 *        alt_putchar      Smaller overhead than putchar with direct drivers
 *        alt_getchar      Smaller overhead than getchar with direct drivers
 *
 */
#include "alt_types.h"
#include "sys/alt_stdio.h"
#include "io.h"
#include "system.h"
#include "sys/alt_cache.h"

#include <stdio.h>
#include <string.h>

#include "altera_avalon_spi.h"
#include "altera_avalon_spi_regs.h"
#include "altera_avalon_timer.h"
#include "altera_avalon_timer_regs.h"
#include "altera_avalon_pio_regs.h"

#include "sys/alt_irq.h"

#include "SPI.h"
#include "SDcard.h"
#include "uart.h"
#include "dataLogger.h"

static DataLogger dataLogger;

//This is the ISR that runs when the SPI error occurred
static void spi_isr(void* isr_context){
//	if(IORD_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE) & ALTERA_AVALON_SPI_STATUS_RRDY_MSK){
//		alt_printf("ISR :) %x \n" ,  IORD_ALTERA_AVALON_SPI_RXDATA(SPI_0_BASE));
//	}
	if(IORD_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE) & ALTERA_AVALON_SPI_STATUS_E_MSK){
		alt_printf("SPI Error occurred !!!\n\rSPI Status register value: %x\n\r", IORD_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE));
	}
	//This resets the IRQ flag. Otherwise the IRQ will continuously run.
	IOWR_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE, 0x00);
}

//ISR for timer, runs every 1ms
static void timer_isr(void* isr_context){
	alt_u8 temp;

	if(dataLogger.dataAcquire == 0xff){
		temp = IORD_ALTERA_AVALON_PIO_DATA(PIO_0_BASE);

		if(dataLogger.activeBuffer == 1){
			dataLogger.buffer1[dataLogger.bufIndex] = temp;
			dataLogger.bufIndex++;
		}
		else if(dataLogger.activeBuffer == 2){
			dataLogger.buffer2[dataLogger.bufIndex] = temp;
			dataLogger.bufIndex++;
		}
		else
			alt_printf("Error! Buffer not selected\n\r");

		if(dataLogger.bufIndex >= 512){				//after buffer is full allow save'ing data to SD card
			dataLogger.dataSaveToSD = 0xff;
			dataLogger.bufIndex = 0;
		}
	}
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0);
}

int main()
{
  int ret;
  alt_u32 i;

  alt_printf("Hello from Nios II!\n\r");
  alt_u8 buffer[512];

  dataLogger_init(&dataLogger);

  //TODO: spi_init
//  IOWR_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE, 0x00);
  /*Discard previous data*/
  if(spi_IsData(SPI_0_BASE)){
	spi_ReadData(SPI_0_BASE);
  }

  //This registers the Slave IRQ with NIOS
  ret = alt_ic_isr_register(SPI_0_IRQ_INTERRUPT_CONTROLLER_ID, SPI_0_IRQ, spi_isr, NULL, 0x0);
  alt_printf("SPI IRQ register return %x \n\r", ret);

  //You need to enable the IRQ in the IP core control register as well.
  IOWR_ALTERA_AVALON_SPI_CONTROL(SPI_0_BASE, ALTERA_AVALON_SPI_CONTROL_IE_MSK);

  //register the timer irq to be serviced by timer_isr() function
  ret = alt_ic_isr_register(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_0_IRQ, timer_isr, NULL, 0x0);
  alt_printf("Timer IRQ register return %x \n\r", ret);

  //activate the timer
  IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE,
                  ALTERA_AVALON_TIMER_CONTROL_CONT_MSK
                | ALTERA_AVALON_TIMER_CONTROL_START_MSK
                | ALTERA_AVALON_TIMER_CONTROL_ITO_MSK);

  if(sdCard_Init()){
	 alt_printf("SD Card Initialization successful\n\r");
  }
  else{
	  alt_printf("SD Card Initialization failed\n\r");
	  while(1);
  }

  /*---------------TEST---------------------*/
  /*Read Data*/
  sdCard_ReadData(5120,1, buffer);
  /*Save Data*/

//  for(i=0;i<512;i++){
//	  dataLogger.buffer1[i] = i%256;
//  }
//  sdCard_SaveData(2048,dataLogger.buffer1);
//  sdCard_ReadData(2048,1, buffer);
  /*----------------------------------------*/

  while(1){
	  uart_commandManage(&dataLogger);
	  dataLogger_manage(&dataLogger);

	  /*Generate test data on GPIO*/
	    for(i=0;i<512;i++){
	  	IOWR_ALTERA_AVALON_PIO_DATA(PIO_1_BASE, i%256);
	    }
  }

  return 0;
}

